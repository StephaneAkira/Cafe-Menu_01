Cafe Menu Begin
----------------------------------------------------------------
----------------------------------------------------------------


In this project, you will learn the basics of CSS (Cascading Style Sheets) 
by building a cafe menu. 
CSS is the language used to style an HTML document. 
It describes how HTML elements should be displayed on the screen.

As you learned in the last few steps of the Cat Photo App, 
there is a basic structure needed to start building your web page. 
Every HTML document should have a DOCTYPE declaration and html element. 
The DOCTYPE tells the browser which version of HTML the document is in. 
And the html element represents the root element which contains 
all other elements.


Example Code
<!DOCTYPE html>
<html lang="en">
<!--all other elements go here-->
</html>

You can add style to an element by specifying it in the style element 
and setting a property for it like this:

Example Code
element {
 property: value;
}

Center the content of the h1 element by setting its text-align property to the value center.
A/ h1 {
        text-align: center;
      }

In the previous step, you used a type selector to style the h1 element. 
Center the content of the h2 and the p elements by adding a new type 
selector for each one to the existing style element.

A/ same as the previous question 

You now have three type selectors with the exact same styling. 
You can add the same group of styles to many elements by creating a list of 
selectors. Each selector is separated with commas like this:

Example Code
selector1, selector2 {
  property: value;
}

Now that you have the CSS in the styles.css file, go ahead and remove the style element and all its content. 
Once it is removed, the text that was centered will shift back to the left.


For the styling of the page to look similar on mobile as it does on a desktop or laptop, 
you need to add a meta element with a special content attribute.

Add the following within the head element:

Example Code
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

The text is centered again so the link to the CSS file is working. 
Add another style to the file that changes the background-color property to brown for the body element.

The div element is used mainly for design layout purposes unlike 
the other content elements you have used so far.

The goal now is to make the div not take up the entire width of the page. 
The CSS width property is perfect for this.

You can use the id selector to target a specific element with an id attribute. 
An id selector is defined by placing the hash symbol # directly in front of the element's id value. 
For example, if an element has the id of cat then you would target that element like this:

Example Code
#cat {
  width: 250px;
}

Comments in CSS look like this:

Example Code
/* comment here */


Now it's easy to see that the text is centered inside the #menu element. 
Currently, the width of the #menu element is specified in pixels (px).

Change the width property's value to be 80%, 
to make it 80% the width of its parent element (body).

Next, you want to center the #menu horizontally. 
You can do this by setting its margin-left and margin-right properties to auto. 
Think of the margin as invisible space around an element. Using these two margin properties, 
center the #menu element within the body element.

Step 26
So far you have been using type and id selectors to style elements. However, 
it is more common to use a different selector to style your elements.

A class selector is defined by a name with a dot directly in front of it, like this:

Example Code
.class-name {
  styles
}

Since the cafe's main product for sale is coffee, 
you could use an image of coffee beans for the background of the page.

Delete the comment and its contents inside the body type selector. 
Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).

Itâ€™s looking good. Time to start adding some menu items. 
Add an empty article element under the Coffee heading. 
It will contain a flavor and price of each coffee you currently offer.

article elements commonly contain multiple elements that have related 
information. 
In this case, it will contain a coffee flavor and a price for that flavor. 

Starting below the existing coffee/price pair, 
add the following coffee and prices using article elements with two nested p elements inside each. 
As before, the first p element's text should contain the coffee flavor 
and the second p element's text should contain the price.

Example Code
Caramel Macchiato 3.75
Pumpkin Spice 3.50
Hazelnut 4.00
Mocha 4.50

The flavors and prices are currently stacked on top of each other 
and centered with their respective p elements. 

It would be nice if the flavor was on the left and the price 
was on the right.

Using your new flavor class as a selector, 
set the text-align property's value to left.

Next, you want to align the price to the right. 
Add a class named price to your p element that has 3.00 as its text.

Now align the text to the right for the elements with the price class.


That is kind of what you want, but now it would be nice if the flavor 
and price were on the same line. 
p elements are block-level elements, 
so they take up the entire width of their parent element.

To get them on the same line, 
you need to apply some styling to the p elements so they behave more like 
inline elements.
To do that, 
start by adding a class attribute with the value item to the first article 
element under the Coffee heading.

You can give your menu some space between the content and the sides with 
various padding properties.

Give the menu class a padding-left and a padding-right with the same 
value 20px.

That looks better. 
Now try to add the same 20px padding to the top and bottom of the menu.

Since all 4 sides of the menu have the same internal spacing, 
go ahead and delete the four properties and use a single padding property 
with the value 20px.
basically padding : 20px ; 
will give 20px to the top, bottom, left and right padding

The current width of the menu will always take up 80% of the body element's width. 
On a very wide screen, the coffee and dessert appear far apart from their prices.

Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.

You can change the font-family of text, to make it look different from the default font of your browser. 
Each browser has some common fonts available to it.

Change all the text in your body, by adding a font-family property with the value sans-serif. 
This is a fairly common font that is very readable.

It is a bit boring for all the text to have the same font-family. 
You can still have the majority of the text sans-serif and make just the h1 and h2 elements different using a different 
selector.

Style both the h1 and the h2 elements using a single selector so that these elements' text use Impact font.

You can add a fallback value for the font-family by adding another font name separated by a comma. 
Fallbacks are used in instances where the initial is not found/available.

Add the fallback font serif after the Impact font.

Notice the grey color along the edges of the line. Those edges are known as borders. 
Each side of an element can have a different color or they can all be the same.

Make all the edges of the hr element the same color as the background of it using the border-color property.

Notice how the thickness of the line looks bigger? 
The default value of a property named border-width is 1px for all edges of hr elements. 
By changing the border to the same color as the background, 
the total height of the line is 5px (3px plus the top and bottom border width of 1px).

Change the height property of the hr to be 2px, so the total height of it becomes 4px.

To create a little more room around the menu, 
add 20px of space on the inside of the body element by using the padding property.

Focusing on the menu items and prices, there is a fairly large gap between each line.

Use the existing selector that targets all the p elements nested in elements with the class named item 
and set their top and bottom margin to be 5px.

Using the same style selector in the previous step, 
make the font size of the items and prices larger by using a value of 18px.

Changing the margin-bottom to 5px looks great. 
However, now the space between the Cinnamon Roll menu item and the second hr element does not match the space between 
the top hr element and the Coffee heading.

Next you are going to be styling the footer element. 
To keep the CSS organized, add a comment at the end of styles.css with the text FOOTER.

The default color of a link that has not yet been clicked on is typically blue. 
The default color of a link that has already been visited from a page is typically purple.

To make the footer links the same color regardless if a link has been visited, 
use a type selector for the anchor element (a) and use the value black for the color property.
You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like 
a:visited { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be grey when a user has visited the link.

You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be brown when a user hovers over it.

You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be white when clicked on.
Now the top spacing looks good. The space below the address at the bottom of the menu is a little bigger 
than the space at the top of the menu and the h1 element.

To decrease the default margin space below the address p element, 
create a class selector named address and use the value 5px for the margin-bottom property.

The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements.

To make the image behave like heading elements (which are block-level), 
create an img type selector and use the value block for the display property and use the applicable margin-left and margin-right 
values to center it horizontally.

It would be nice if the vertical space between the h2 elements and their associated icons was smaller. 
The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number.

There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. 
Negative values are created using a - in front of the value. To complete this project, 
go ahead and use a negative top margin of 25px in the img type selector.